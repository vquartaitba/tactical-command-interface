/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DataRegistryInterface extends utils.Interface {
  functions: {
    "addDataSource(bytes32,string,string,string,bytes32)": FunctionFragment;
    "addDataType(bytes32,string,string)": FunctionFragment;
    "addDataTypeSupport(bytes32,bytes32)": FunctionFragment;
    "allDataTypeIds(uint256)": FunctionFragment;
    "allSourceIds(uint256)": FunctionFragment;
    "authorizedSources(address,uint256)": FunctionFragment;
    "dataSources(bytes32)": FunctionFragment;
    "dataTypes(bytes32)": FunctionFragment;
    "deactivateDataSource(bytes32)": FunctionFragment;
    "getAllDataTypeIds()": FunctionFragment;
    "getAllSourceIds()": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getDataSource(bytes32)": FunctionFragment;
    "getDataType(bytes32)": FunctionFragment;
    "isDataSourceActive(bytes32)": FunctionFragment;
    "isDataTypeSupported(bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "reactivateDataSource(bytes32)": FunctionFragment;
    "recordDataRequest(bytes32,bytes32,address,bool)": FunctionFragment;
    "removeDataTypeSupport(bytes32,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalDataSources()": FunctionFragment;
    "totalDataTypes()": FunctionFragment;
    "totalRequests()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDataSource(bytes32,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDataSource"
      | "addDataType"
      | "addDataTypeSupport"
      | "allDataTypeIds"
      | "allSourceIds"
      | "authorizedSources"
      | "dataSources"
      | "dataTypes"
      | "deactivateDataSource"
      | "getAllDataTypeIds"
      | "getAllSourceIds"
      | "getContractStats"
      | "getDataSource"
      | "getDataType"
      | "isDataSourceActive"
      | "isDataTypeSupported"
      | "owner"
      | "pause"
      | "paused"
      | "reactivateDataSource"
      | "recordDataRequest"
      | "removeDataTypeSupport"
      | "renounceOwnership"
      | "totalDataSources"
      | "totalDataTypes"
      | "totalRequests"
      | "transferOwnership"
      | "unpause"
      | "updateDataSource"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDataSource",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addDataType",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addDataTypeSupport",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allDataTypeIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allSourceIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedSources",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataSources",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dataTypes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateDataSource",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDataTypeIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSourceIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataSource",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataType",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDataSourceActive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDataTypeSupported",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivateDataSource",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordDataRequest",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDataTypeSupport",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDataSources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDataTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDataSource",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDataType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDataTypeSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allDataTypeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSourceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDataTypeIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSourceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDataSourceActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDataTypeSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivateDataSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordDataRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDataTypeSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDataSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDataTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDataSource",
    data: BytesLike
  ): Result;

  events: {
    "DataRequested(bytes32,bytes32,address)": EventFragment;
    "DataSourceAdded(bytes32,string,address)": EventFragment;
    "DataSourceDeactivated(bytes32)": EventFragment;
    "DataSourceReactivated(bytes32)": EventFragment;
    "DataSourceUpdated(bytes32,string)": EventFragment;
    "DataTypeAdded(bytes32,string)": EventFragment;
    "DataTypeSupported(bytes32,bytes32)": EventFragment;
    "DataTypeUnsupported(bytes32,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSourceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSourceDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSourceReactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataSourceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataTypeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataTypeSupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataTypeUnsupported"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface DataRequestedEventObject {
  sourceId: string;
  dataType: string;
  requester: string;
}
export type DataRequestedEvent = TypedEvent<
  [string, string, string],
  DataRequestedEventObject
>;

export type DataRequestedEventFilter = TypedEventFilter<DataRequestedEvent>;

export interface DataSourceAddedEventObject {
  sourceId: string;
  sourceName: string;
  addedBy: string;
}
export type DataSourceAddedEvent = TypedEvent<
  [string, string, string],
  DataSourceAddedEventObject
>;

export type DataSourceAddedEventFilter = TypedEventFilter<DataSourceAddedEvent>;

export interface DataSourceDeactivatedEventObject {
  sourceId: string;
}
export type DataSourceDeactivatedEvent = TypedEvent<
  [string],
  DataSourceDeactivatedEventObject
>;

export type DataSourceDeactivatedEventFilter =
  TypedEventFilter<DataSourceDeactivatedEvent>;

export interface DataSourceReactivatedEventObject {
  sourceId: string;
}
export type DataSourceReactivatedEvent = TypedEvent<
  [string],
  DataSourceReactivatedEventObject
>;

export type DataSourceReactivatedEventFilter =
  TypedEventFilter<DataSourceReactivatedEvent>;

export interface DataSourceUpdatedEventObject {
  sourceId: string;
  sourceName: string;
}
export type DataSourceUpdatedEvent = TypedEvent<
  [string, string],
  DataSourceUpdatedEventObject
>;

export type DataSourceUpdatedEventFilter =
  TypedEventFilter<DataSourceUpdatedEvent>;

export interface DataTypeAddedEventObject {
  typeId: string;
  typeName: string;
}
export type DataTypeAddedEvent = TypedEvent<
  [string, string],
  DataTypeAddedEventObject
>;

export type DataTypeAddedEventFilter = TypedEventFilter<DataTypeAddedEvent>;

export interface DataTypeSupportedEventObject {
  sourceId: string;
  typeId: string;
}
export type DataTypeSupportedEvent = TypedEvent<
  [string, string],
  DataTypeSupportedEventObject
>;

export type DataTypeSupportedEventFilter =
  TypedEventFilter<DataTypeSupportedEvent>;

export interface DataTypeUnsupportedEventObject {
  sourceId: string;
  typeId: string;
}
export type DataTypeUnsupportedEvent = TypedEvent<
  [string, string],
  DataTypeUnsupportedEventObject
>;

export type DataTypeUnsupportedEventFilter =
  TypedEventFilter<DataTypeUnsupportedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DataRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DataRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      _apiKeyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addDataType(
      _typeId: PromiseOrValue<BytesLike>,
      _typeName: PromiseOrValue<string>,
      _typeDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allDataTypeIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allSourceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorizedSources(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    dataSources(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sourceId: string;
        sourceName: string;
        sourceDescription: string;
        apiEndpoint: string;
        apiKeyHash: string;
        isActive: boolean;
        addedAt: BigNumber;
        lastUpdated: BigNumber;
        addedBy: string;
        requestCount: BigNumber;
        successCount: BigNumber;
        failureCount: BigNumber;
      }
    >;

    dataTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        typeId: string;
        typeName: string;
        typeDescription: string;
        isSupported: boolean;
        addedAt: BigNumber;
        lastUsed: BigNumber;
      }
    >;

    deactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllDataTypeIds(overrides?: CallOverrides): Promise<[string[]]>;

    getAllSourceIds(overrides?: CallOverrides): Promise<[string[]]>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _totalDataSources: BigNumber;
        _totalDataTypes: BigNumber;
        _totalRequests: BigNumber;
      }
    >;

    getDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sourceName: string;
        sourceDescription: string;
        apiEndpoint: string;
        isActive: boolean;
        addedAt: BigNumber;
        requestCount: BigNumber;
        successCount: BigNumber;
        failureCount: BigNumber;
      }
    >;

    getDataType(
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber] & {
        typeName: string;
        typeDescription: string;
        isSupported: boolean;
        addedAt: BigNumber;
        lastUsed: BigNumber;
      }
    >;

    isDataSourceActive(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDataTypeSupported(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    reactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordDataRequest(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      _requester: PromiseOrValue<string>,
      _success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDataSources(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDataTypes(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addDataSource(
    _sourceId: PromiseOrValue<BytesLike>,
    _sourceName: PromiseOrValue<string>,
    _sourceDescription: PromiseOrValue<string>,
    _apiEndpoint: PromiseOrValue<string>,
    _apiKeyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addDataType(
    _typeId: PromiseOrValue<BytesLike>,
    _typeName: PromiseOrValue<string>,
    _typeDescription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addDataTypeSupport(
    _sourceId: PromiseOrValue<BytesLike>,
    _typeId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allDataTypeIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allSourceIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  authorizedSources(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  dataSources(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sourceId: string;
      sourceName: string;
      sourceDescription: string;
      apiEndpoint: string;
      apiKeyHash: string;
      isActive: boolean;
      addedAt: BigNumber;
      lastUpdated: BigNumber;
      addedBy: string;
      requestCount: BigNumber;
      successCount: BigNumber;
      failureCount: BigNumber;
    }
  >;

  dataTypes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber, BigNumber] & {
      typeId: string;
      typeName: string;
      typeDescription: string;
      isSupported: boolean;
      addedAt: BigNumber;
      lastUsed: BigNumber;
    }
  >;

  deactivateDataSource(
    _sourceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllDataTypeIds(overrides?: CallOverrides): Promise<string[]>;

  getAllSourceIds(overrides?: CallOverrides): Promise<string[]>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _totalDataSources: BigNumber;
      _totalDataTypes: BigNumber;
      _totalRequests: BigNumber;
    }
  >;

  getDataSource(
    _sourceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      sourceName: string;
      sourceDescription: string;
      apiEndpoint: string;
      isActive: boolean;
      addedAt: BigNumber;
      requestCount: BigNumber;
      successCount: BigNumber;
      failureCount: BigNumber;
    }
  >;

  getDataType(
    _typeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, BigNumber] & {
      typeName: string;
      typeDescription: string;
      isSupported: boolean;
      addedAt: BigNumber;
      lastUsed: BigNumber;
    }
  >;

  isDataSourceActive(
    _sourceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDataTypeSupported(
    _sourceId: PromiseOrValue<BytesLike>,
    _typeId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  reactivateDataSource(
    _sourceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordDataRequest(
    _sourceId: PromiseOrValue<BytesLike>,
    _typeId: PromiseOrValue<BytesLike>,
    _requester: PromiseOrValue<string>,
    _success: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDataTypeSupport(
    _sourceId: PromiseOrValue<BytesLike>,
    _typeId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDataSources(overrides?: CallOverrides): Promise<BigNumber>;

  totalDataTypes(overrides?: CallOverrides): Promise<BigNumber>;

  totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDataSource(
    _sourceId: PromiseOrValue<BytesLike>,
    _sourceName: PromiseOrValue<string>,
    _sourceDescription: PromiseOrValue<string>,
    _apiEndpoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      _apiKeyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addDataType(
      _typeId: PromiseOrValue<BytesLike>,
      _typeName: PromiseOrValue<string>,
      _typeDescription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    allDataTypeIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allSourceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    authorizedSources(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    dataSources(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sourceId: string;
        sourceName: string;
        sourceDescription: string;
        apiEndpoint: string;
        apiKeyHash: string;
        isActive: boolean;
        addedAt: BigNumber;
        lastUpdated: BigNumber;
        addedBy: string;
        requestCount: BigNumber;
        successCount: BigNumber;
        failureCount: BigNumber;
      }
    >;

    dataTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, BigNumber] & {
        typeId: string;
        typeName: string;
        typeDescription: string;
        isSupported: boolean;
        addedAt: BigNumber;
        lastUsed: BigNumber;
      }
    >;

    deactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllDataTypeIds(overrides?: CallOverrides): Promise<string[]>;

    getAllSourceIds(overrides?: CallOverrides): Promise<string[]>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _totalDataSources: BigNumber;
        _totalDataTypes: BigNumber;
        _totalRequests: BigNumber;
      }
    >;

    getDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        sourceName: string;
        sourceDescription: string;
        apiEndpoint: string;
        isActive: boolean;
        addedAt: BigNumber;
        requestCount: BigNumber;
        successCount: BigNumber;
        failureCount: BigNumber;
      }
    >;

    getDataType(
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber] & {
        typeName: string;
        typeDescription: string;
        isSupported: boolean;
        addedAt: BigNumber;
        lastUsed: BigNumber;
      }
    >;

    isDataSourceActive(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDataTypeSupported(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    reactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordDataRequest(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      _requester: PromiseOrValue<string>,
      _success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalDataSources(overrides?: CallOverrides): Promise<BigNumber>;

    totalDataTypes(overrides?: CallOverrides): Promise<BigNumber>;

    totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DataRequested(bytes32,bytes32,address)"(
      sourceId?: PromiseOrValue<BytesLike> | null,
      dataType?: PromiseOrValue<BytesLike> | null,
      requester?: PromiseOrValue<string> | null
    ): DataRequestedEventFilter;
    DataRequested(
      sourceId?: PromiseOrValue<BytesLike> | null,
      dataType?: PromiseOrValue<BytesLike> | null,
      requester?: PromiseOrValue<string> | null
    ): DataRequestedEventFilter;

    "DataSourceAdded(bytes32,string,address)"(
      sourceId?: PromiseOrValue<BytesLike> | null,
      sourceName?: null,
      addedBy?: PromiseOrValue<string> | null
    ): DataSourceAddedEventFilter;
    DataSourceAdded(
      sourceId?: PromiseOrValue<BytesLike> | null,
      sourceName?: null,
      addedBy?: PromiseOrValue<string> | null
    ): DataSourceAddedEventFilter;

    "DataSourceDeactivated(bytes32)"(
      sourceId?: PromiseOrValue<BytesLike> | null
    ): DataSourceDeactivatedEventFilter;
    DataSourceDeactivated(
      sourceId?: PromiseOrValue<BytesLike> | null
    ): DataSourceDeactivatedEventFilter;

    "DataSourceReactivated(bytes32)"(
      sourceId?: PromiseOrValue<BytesLike> | null
    ): DataSourceReactivatedEventFilter;
    DataSourceReactivated(
      sourceId?: PromiseOrValue<BytesLike> | null
    ): DataSourceReactivatedEventFilter;

    "DataSourceUpdated(bytes32,string)"(
      sourceId?: PromiseOrValue<BytesLike> | null,
      sourceName?: null
    ): DataSourceUpdatedEventFilter;
    DataSourceUpdated(
      sourceId?: PromiseOrValue<BytesLike> | null,
      sourceName?: null
    ): DataSourceUpdatedEventFilter;

    "DataTypeAdded(bytes32,string)"(
      typeId?: PromiseOrValue<BytesLike> | null,
      typeName?: null
    ): DataTypeAddedEventFilter;
    DataTypeAdded(
      typeId?: PromiseOrValue<BytesLike> | null,
      typeName?: null
    ): DataTypeAddedEventFilter;

    "DataTypeSupported(bytes32,bytes32)"(
      sourceId?: PromiseOrValue<BytesLike> | null,
      typeId?: PromiseOrValue<BytesLike> | null
    ): DataTypeSupportedEventFilter;
    DataTypeSupported(
      sourceId?: PromiseOrValue<BytesLike> | null,
      typeId?: PromiseOrValue<BytesLike> | null
    ): DataTypeSupportedEventFilter;

    "DataTypeUnsupported(bytes32,bytes32)"(
      sourceId?: PromiseOrValue<BytesLike> | null,
      typeId?: PromiseOrValue<BytesLike> | null
    ): DataTypeUnsupportedEventFilter;
    DataTypeUnsupported(
      sourceId?: PromiseOrValue<BytesLike> | null,
      typeId?: PromiseOrValue<BytesLike> | null
    ): DataTypeUnsupportedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      _apiKeyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addDataType(
      _typeId: PromiseOrValue<BytesLike>,
      _typeName: PromiseOrValue<string>,
      _typeDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allDataTypeIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allSourceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedSources(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataSources(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllDataTypeIds(overrides?: CallOverrides): Promise<BigNumber>;

    getAllSourceIds(overrides?: CallOverrides): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataType(
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDataSourceActive(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDataTypeSupported(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    reactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordDataRequest(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      _requester: PromiseOrValue<string>,
      _success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDataSources(overrides?: CallOverrides): Promise<BigNumber>;

    totalDataTypes(overrides?: CallOverrides): Promise<BigNumber>;

    totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      _apiKeyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addDataType(
      _typeId: PromiseOrValue<BytesLike>,
      _typeName: PromiseOrValue<string>,
      _typeDescription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allDataTypeIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allSourceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedSources(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataSources(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataTypes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllDataTypeIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllSourceIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataType(
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDataSourceActive(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDataTypeSupported(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reactivateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordDataRequest(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      _requester: PromiseOrValue<string>,
      _success: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDataTypeSupport(
      _sourceId: PromiseOrValue<BytesLike>,
      _typeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDataSources(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDataTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDataSource(
      _sourceId: PromiseOrValue<BytesLike>,
      _sourceName: PromiseOrValue<string>,
      _sourceDescription: PromiseOrValue<string>,
      _apiEndpoint: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
