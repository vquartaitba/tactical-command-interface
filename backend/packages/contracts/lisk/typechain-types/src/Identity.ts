/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IdentityInterface extends utils.Interface {
  functions: {
    "approveCreditScoreRequest(bytes32)": FunctionFragment;
    "authorizeAPI(address,bytes32)": FunctionFragment;
    "authorizeFintech(address,address)": FunctionFragment;
    "completeCreditScoreRequest(bytes32)": FunctionFragment;
    "creditScoreRequests(bytes32)": FunctionFragment;
    "fintechCreditScoreRequests(address,uint256)": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getCreditScoreRequest(bytes32)": FunctionFragment;
    "getFintechCreditScoreRequests(address)": FunctionFragment;
    "getUserCreditScoreRequests(address)": FunctionFragment;
    "getUserIdentity(address)": FunctionFragment;
    "hasAPIAccess(address,bytes32)": FunctionFragment;
    "identities(address)": FunctionFragment;
    "isFintechAuthorized(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "registerUser(string)": FunctionFragment;
    "rejectCreditScoreRequest(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestCreditScore(address,bytes32)": FunctionFragment;
    "revokeAPI(address,bytes32)": FunctionFragment;
    "revokeFintech(address,address)": FunctionFragment;
    "totalCreditScoreRequests()": FunctionFragment;
    "totalUsers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userCreditScoreRequests(address,uint256)": FunctionFragment;
    "userIdToAddress(string)": FunctionFragment;
    "verifyUser(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveCreditScoreRequest"
      | "authorizeAPI"
      | "authorizeFintech"
      | "completeCreditScoreRequest"
      | "creditScoreRequests"
      | "fintechCreditScoreRequests"
      | "getContractStats"
      | "getCreditScoreRequest"
      | "getFintechCreditScoreRequests"
      | "getUserCreditScoreRequests"
      | "getUserIdentity"
      | "hasAPIAccess"
      | "identities"
      | "isFintechAuthorized"
      | "owner"
      | "pause"
      | "paused"
      | "registerUser"
      | "rejectCreditScoreRequest"
      | "renounceOwnership"
      | "requestCreditScore"
      | "revokeAPI"
      | "revokeFintech"
      | "totalCreditScoreRequests"
      | "totalUsers"
      | "transferOwnership"
      | "unpause"
      | "userCreditScoreRequests"
      | "userIdToAddress"
      | "verifyUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveCreditScoreRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAPI",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeFintech",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCreditScoreRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "creditScoreRequests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fintechCreditScoreRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScoreRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFintechCreditScoreRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCreditScoreRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIdentity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAPIAccess",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "identities",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFintechAuthorized",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectCreditScoreRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCreditScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAPI",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeFintech",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCreditScoreRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userCreditScoreRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userIdToAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyUser",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveCreditScoreRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAPI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeFintech",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeCreditScoreRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fintechCreditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScoreRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFintechCreditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCreditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAPIAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFintechAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectCreditScoreRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeAPI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeFintech",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCreditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalUsers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCreditScoreRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIdToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyUser", data: BytesLike): Result;

  events: {
    "APIAuthorized(address,bytes32)": EventFragment;
    "APIRevoked(address,bytes32)": EventFragment;
    "CreditScoreApproved(bytes32,address)": EventFragment;
    "CreditScoreRejected(bytes32,address)": EventFragment;
    "CreditScoreRequested(bytes32,address,address)": EventFragment;
    "FintechAuthorized(address,address)": EventFragment;
    "FintechRevoked(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UserRegistered(address,string)": EventFragment;
    "UserVerified(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "APIAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "APIRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoreApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoreRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditScoreRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FintechAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FintechRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserVerified"): EventFragment;
}

export interface APIAuthorizedEventObject {
  userAddress: string;
  apiHash: string;
}
export type APIAuthorizedEvent = TypedEvent<
  [string, string],
  APIAuthorizedEventObject
>;

export type APIAuthorizedEventFilter = TypedEventFilter<APIAuthorizedEvent>;

export interface APIRevokedEventObject {
  userAddress: string;
  apiHash: string;
}
export type APIRevokedEvent = TypedEvent<
  [string, string],
  APIRevokedEventObject
>;

export type APIRevokedEventFilter = TypedEventFilter<APIRevokedEvent>;

export interface CreditScoreApprovedEventObject {
  requestId: string;
  userAddress: string;
}
export type CreditScoreApprovedEvent = TypedEvent<
  [string, string],
  CreditScoreApprovedEventObject
>;

export type CreditScoreApprovedEventFilter =
  TypedEventFilter<CreditScoreApprovedEvent>;

export interface CreditScoreRejectedEventObject {
  requestId: string;
  userAddress: string;
}
export type CreditScoreRejectedEvent = TypedEvent<
  [string, string],
  CreditScoreRejectedEventObject
>;

export type CreditScoreRejectedEventFilter =
  TypedEventFilter<CreditScoreRejectedEvent>;

export interface CreditScoreRequestedEventObject {
  requestId: string;
  fintechAddress: string;
  userAddress: string;
}
export type CreditScoreRequestedEvent = TypedEvent<
  [string, string, string],
  CreditScoreRequestedEventObject
>;

export type CreditScoreRequestedEventFilter =
  TypedEventFilter<CreditScoreRequestedEvent>;

export interface FintechAuthorizedEventObject {
  userAddress: string;
  fintechAddress: string;
}
export type FintechAuthorizedEvent = TypedEvent<
  [string, string],
  FintechAuthorizedEventObject
>;

export type FintechAuthorizedEventFilter =
  TypedEventFilter<FintechAuthorizedEvent>;

export interface FintechRevokedEventObject {
  userAddress: string;
  fintechAddress: string;
}
export type FintechRevokedEvent = TypedEvent<
  [string, string],
  FintechRevokedEventObject
>;

export type FintechRevokedEventFilter = TypedEventFilter<FintechRevokedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UserRegisteredEventObject {
  userAddress: string;
  userId: string;
}
export type UserRegisteredEvent = TypedEvent<
  [string, string],
  UserRegisteredEventObject
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface UserVerifiedEventObject {
  userAddress: string;
}
export type UserVerifiedEvent = TypedEvent<[string], UserVerifiedEventObject>;

export type UserVerifiedEventFilter = TypedEventFilter<UserVerifiedEvent>;

export interface Identity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IdentityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorizeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creditScoreRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean, string] & {
        fintechAddress: string;
        userAddress: string;
        timestamp: BigNumber;
        isApproved: boolean;
        isCompleted: boolean;
        requestId: string;
      }
    >;

    fintechCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalUsers: BigNumber;
        _totalCreditScoreRequests: BigNumber;
      }
    >;

    getCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean] & {
        fintechAddress: string;
        userAddress: string;
        timestamp: BigNumber;
        isApproved: boolean;
        isCompleted: boolean;
      }
    >;

    getFintechCreditScoreRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserCreditScoreRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, boolean] & {
        userId: string;
        isVerified: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        hasActiveCreditScore: boolean;
      }
    >;

    hasAPIAccess(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    identities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, boolean, BigNumber] & {
        userAddress: string;
        userId: string;
        isVerified: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        hasActiveCreditScore: boolean;
        lastCreditScoreRequest: BigNumber;
      }
    >;

    isFintechAuthorized(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registerUser(
      _userId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestCreditScore(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCreditScoreRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveCreditScoreRequest(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeAPI(
    _userAddress: PromiseOrValue<string>,
    _apiHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorizeFintech(
    _userAddress: PromiseOrValue<string>,
    _fintechAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeCreditScoreRequest(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creditScoreRequests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, boolean, string] & {
      fintechAddress: string;
      userAddress: string;
      timestamp: BigNumber;
      isApproved: boolean;
      isCompleted: boolean;
      requestId: string;
    }
  >;

  fintechCreditScoreRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalUsers: BigNumber;
      _totalCreditScoreRequests: BigNumber;
    }
  >;

  getCreditScoreRequest(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, boolean] & {
      fintechAddress: string;
      userAddress: string;
      timestamp: BigNumber;
      isApproved: boolean;
      isCompleted: boolean;
    }
  >;

  getFintechCreditScoreRequests(
    _fintechAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserCreditScoreRequests(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserIdentity(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber, boolean] & {
      userId: string;
      isVerified: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      hasActiveCreditScore: boolean;
    }
  >;

  hasAPIAccess(
    _userAddress: PromiseOrValue<string>,
    _apiHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  identities(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean, BigNumber, BigNumber, boolean, BigNumber] & {
      userAddress: string;
      userId: string;
      isVerified: boolean;
      createdAt: BigNumber;
      lastUpdated: BigNumber;
      hasActiveCreditScore: boolean;
      lastCreditScoreRequest: BigNumber;
    }
  >;

  isFintechAuthorized(
    _userAddress: PromiseOrValue<string>,
    _fintechAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registerUser(
    _userId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectCreditScoreRequest(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestCreditScore(
    _userAddress: PromiseOrValue<string>,
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAPI(
    _userAddress: PromiseOrValue<string>,
    _apiHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeFintech(
    _userAddress: PromiseOrValue<string>,
    _fintechAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCreditScoreRequests(overrides?: CallOverrides): Promise<BigNumber>;

  totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userCreditScoreRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  userIdToAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyUser(
    _userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    creditScoreRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean, string] & {
        fintechAddress: string;
        userAddress: string;
        timestamp: BigNumber;
        isApproved: boolean;
        isCompleted: boolean;
        requestId: string;
      }
    >;

    fintechCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalUsers: BigNumber;
        _totalCreditScoreRequests: BigNumber;
      }
    >;

    getCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean] & {
        fintechAddress: string;
        userAddress: string;
        timestamp: BigNumber;
        isApproved: boolean;
        isCompleted: boolean;
      }
    >;

    getFintechCreditScoreRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserCreditScoreRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber, boolean] & {
        userId: string;
        isVerified: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        hasActiveCreditScore: boolean;
      }
    >;

    hasAPIAccess(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    identities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean, BigNumber, BigNumber, boolean, BigNumber] & {
        userAddress: string;
        userId: string;
        isVerified: boolean;
        createdAt: BigNumber;
        lastUpdated: BigNumber;
        hasActiveCreditScore: boolean;
        lastCreditScoreRequest: BigNumber;
      }
    >;

    isFintechAuthorized(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registerUser(
      _userId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestCreditScore(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCreditScoreRequests(overrides?: CallOverrides): Promise<BigNumber>;

    totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    userIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "APIAuthorized(address,bytes32)"(
      userAddress?: PromiseOrValue<string> | null,
      apiHash?: null
    ): APIAuthorizedEventFilter;
    APIAuthorized(
      userAddress?: PromiseOrValue<string> | null,
      apiHash?: null
    ): APIAuthorizedEventFilter;

    "APIRevoked(address,bytes32)"(
      userAddress?: PromiseOrValue<string> | null,
      apiHash?: null
    ): APIRevokedEventFilter;
    APIRevoked(
      userAddress?: PromiseOrValue<string> | null,
      apiHash?: null
    ): APIRevokedEventFilter;

    "CreditScoreApproved(bytes32,address)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreApprovedEventFilter;
    CreditScoreApproved(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreApprovedEventFilter;

    "CreditScoreRejected(bytes32,address)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreRejectedEventFilter;
    CreditScoreRejected(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreRejectedEventFilter;

    "CreditScoreRequested(bytes32,address,address)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      fintechAddress?: PromiseOrValue<string> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreRequestedEventFilter;
    CreditScoreRequested(
      requestId?: PromiseOrValue<BytesLike> | null,
      fintechAddress?: PromiseOrValue<string> | null,
      userAddress?: PromiseOrValue<string> | null
    ): CreditScoreRequestedEventFilter;

    "FintechAuthorized(address,address)"(
      userAddress?: PromiseOrValue<string> | null,
      fintechAddress?: PromiseOrValue<string> | null
    ): FintechAuthorizedEventFilter;
    FintechAuthorized(
      userAddress?: PromiseOrValue<string> | null,
      fintechAddress?: PromiseOrValue<string> | null
    ): FintechAuthorizedEventFilter;

    "FintechRevoked(address,address)"(
      userAddress?: PromiseOrValue<string> | null,
      fintechAddress?: PromiseOrValue<string> | null
    ): FintechRevokedEventFilter;
    FintechRevoked(
      userAddress?: PromiseOrValue<string> | null,
      fintechAddress?: PromiseOrValue<string> | null
    ): FintechRevokedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UserRegistered(address,string)"(
      userAddress?: PromiseOrValue<string> | null,
      userId?: null
    ): UserRegisteredEventFilter;
    UserRegistered(
      userAddress?: PromiseOrValue<string> | null,
      userId?: null
    ): UserRegisteredEventFilter;

    "UserVerified(address)"(
      userAddress?: PromiseOrValue<string> | null
    ): UserVerifiedEventFilter;
    UserVerified(
      userAddress?: PromiseOrValue<string> | null
    ): UserVerifiedEventFilter;
  };

  estimateGas: {
    approveCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorizeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creditScoreRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fintechCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFintechCreditScoreRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserCreditScoreRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAPIAccess(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFintechAuthorized(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registerUser(
      _userId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestCreditScore(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCreditScoreRequests(overrides?: CallOverrides): Promise<BigNumber>;

    totalUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorizeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creditScoreRequests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fintechCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFintechCreditScoreRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserCreditScoreRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserIdentity(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAPIAccess(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identities(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFintechAuthorized(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerUser(
      _userId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectCreditScoreRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestCreditScore(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAPI(
      _userAddress: PromiseOrValue<string>,
      _apiHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeFintech(
      _userAddress: PromiseOrValue<string>,
      _fintechAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCreditScoreRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userCreditScoreRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userIdToAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyUser(
      _userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
