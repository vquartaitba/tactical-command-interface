/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CreditScoreModelInterface extends utils.Interface {
  functions: {
    "baseCreditScore()": FunctionFragment;
    "completedRequests()": FunctionFragment;
    "executeComputation(bytes32,bytes)": FunctionFragment;
    "fintechRequests(address,uint256)": FunctionFragment;
    "getComputationRequest(bytes32)": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getEncryptedScore(bytes32)": FunctionFragment;
    "getFintechRequests(address)": FunctionFragment;
    "getModelParameters()": FunctionFragment;
    "getUserRequests(address)": FunctionFragment;
    "isRequestValid(bytes32)": FunctionFragment;
    "modelParams()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestComputation(address,bytes32,bytes32,uint256)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "setModelActive(bool)": FunctionFragment;
    "totalRequests()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateModelParameters(uint32,uint32,uint32)": FunctionFragment;
    "userRequests(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseCreditScore"
      | "completedRequests"
      | "executeComputation"
      | "fintechRequests"
      | "getComputationRequest"
      | "getContractStats"
      | "getEncryptedScore"
      | "getFintechRequests"
      | "getModelParameters"
      | "getUserRequests"
      | "isRequestValid"
      | "modelParams"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "requestComputation"
      | "requests"
      | "setModelActive"
      | "totalRequests"
      | "transferOwnership"
      | "unpause"
      | "updateModelParameters"
      | "userRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "baseCreditScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completedRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeComputation",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "fintechRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputationRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedScore",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFintechRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModelParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestValid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "modelParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestComputation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModelActive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateModelParameters",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completedRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeComputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fintechRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFintechRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModelParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequestValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modelParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestComputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setModelActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateModelParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRequests",
    data: BytesLike
  ): Result;

  events: {
    "BaseScoreUpdated(uint256)": EventFragment;
    "ComputationCompleted(bytes32,address,uint256)": EventFragment;
    "ComputationRequested(bytes32,address,address)": EventFragment;
    "ModelParametersUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseScoreUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputationCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputationRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelParametersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BaseScoreUpdatedEventObject {
  newBaseScore: BigNumber;
}
export type BaseScoreUpdatedEvent = TypedEvent<
  [BigNumber],
  BaseScoreUpdatedEventObject
>;

export type BaseScoreUpdatedEventFilter =
  TypedEventFilter<BaseScoreUpdatedEvent>;

export interface ComputationCompletedEventObject {
  requestId: string;
  userAddress: string;
  encryptedScore: BigNumber;
}
export type ComputationCompletedEvent = TypedEvent<
  [string, string, BigNumber],
  ComputationCompletedEventObject
>;

export type ComputationCompletedEventFilter =
  TypedEventFilter<ComputationCompletedEvent>;

export interface ComputationRequestedEventObject {
  requestId: string;
  userAddress: string;
  fintech: string;
}
export type ComputationRequestedEvent = TypedEvent<
  [string, string, string],
  ComputationRequestedEventObject
>;

export type ComputationRequestedEventFilter =
  TypedEventFilter<ComputationRequestedEvent>;

export interface ModelParametersUpdatedEventObject {
  timestamp: BigNumber;
}
export type ModelParametersUpdatedEvent = TypedEvent<
  [BigNumber],
  ModelParametersUpdatedEventObject
>;

export type ModelParametersUpdatedEventFilter =
  TypedEventFilter<ModelParametersUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface CreditScoreModel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditScoreModelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseCreditScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    completedRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeComputation(
      _requestId: PromiseOrValue<BytesLike>,
      _encryptedUserData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fintechRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getComputationRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, string, BigNumber] & {
        userAddress: string;
        timestamp: BigNumber;
        isCompleted: boolean;
        encryptedScore: BigNumber;
        dataHash: string;
        validUntil: BigNumber;
      }
    >;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _totalRequests: BigNumber;
        _completedRequests: BigNumber;
        _baseCreditScore: BigNumber;
      }
    >;

    getEncryptedScore(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFintechRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        baseScore: BigNumber;
        riskMultiplier: BigNumber;
        creditLimit: BigNumber;
        isActive: boolean;
        lastUpdated: BigNumber;
      }
    >;

    getUserRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isRequestValid(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modelParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        baseScore: BigNumber;
        riskMultiplier: BigNumber;
        creditLimit: BigNumber;
        isActive: boolean;
        lastUpdated: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestComputation(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _dataHash: PromiseOrValue<BytesLike>,
      _validUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        userAddress: string;
        requestId: string;
        timestamp: BigNumber;
        isCompleted: boolean;
        encryptedScore: BigNumber;
        dataHash: string;
        validUntil: BigNumber;
        requestedBy: string;
      }
    >;

    setModelActive(
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateModelParameters(
      _baseScore: PromiseOrValue<BigNumberish>,
      _riskMultiplier: PromiseOrValue<BigNumberish>,
      _creditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  baseCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

  completedRequests(overrides?: CallOverrides): Promise<BigNumber>;

  executeComputation(
    _requestId: PromiseOrValue<BytesLike>,
    _encryptedUserData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fintechRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComputationRequest(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber, string, BigNumber] & {
      userAddress: string;
      timestamp: BigNumber;
      isCompleted: boolean;
      encryptedScore: BigNumber;
      dataHash: string;
      validUntil: BigNumber;
    }
  >;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _totalRequests: BigNumber;
      _completedRequests: BigNumber;
      _baseCreditScore: BigNumber;
    }
  >;

  getEncryptedScore(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFintechRequests(
    _fintechAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getModelParameters(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      baseScore: BigNumber;
      riskMultiplier: BigNumber;
      creditLimit: BigNumber;
      isActive: boolean;
      lastUpdated: BigNumber;
    }
  >;

  getUserRequests(
    _userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isRequestValid(
    _requestId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modelParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      baseScore: BigNumber;
      riskMultiplier: BigNumber;
      creditLimit: BigNumber;
      isActive: boolean;
      lastUpdated: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestComputation(
    _userAddress: PromiseOrValue<string>,
    _requestId: PromiseOrValue<BytesLike>,
    _dataHash: PromiseOrValue<BytesLike>,
    _validUntil: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      boolean,
      BigNumber,
      string,
      BigNumber,
      string
    ] & {
      userAddress: string;
      requestId: string;
      timestamp: BigNumber;
      isCompleted: boolean;
      encryptedScore: BigNumber;
      dataHash: string;
      validUntil: BigNumber;
      requestedBy: string;
    }
  >;

  setModelActive(
    _isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateModelParameters(
    _baseScore: PromiseOrValue<BigNumberish>,
    _riskMultiplier: PromiseOrValue<BigNumberish>,
    _creditLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRequests(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    baseCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

    completedRequests(overrides?: CallOverrides): Promise<BigNumber>;

    executeComputation(
      _requestId: PromiseOrValue<BytesLike>,
      _encryptedUserData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    fintechRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComputationRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, string, BigNumber] & {
        userAddress: string;
        timestamp: BigNumber;
        isCompleted: boolean;
        encryptedScore: BigNumber;
        dataHash: string;
        validUntil: BigNumber;
      }
    >;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _totalRequests: BigNumber;
        _completedRequests: BigNumber;
        _baseCreditScore: BigNumber;
      }
    >;

    getEncryptedScore(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFintechRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        baseScore: BigNumber;
        riskMultiplier: BigNumber;
        creditLimit: BigNumber;
        isActive: boolean;
        lastUpdated: BigNumber;
      }
    >;

    getUserRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isRequestValid(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modelParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        baseScore: BigNumber;
        riskMultiplier: BigNumber;
        creditLimit: BigNumber;
        isActive: boolean;
        lastUpdated: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestComputation(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _dataHash: PromiseOrValue<BytesLike>,
      _validUntil: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        boolean,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        userAddress: string;
        requestId: string;
        timestamp: BigNumber;
        isCompleted: boolean;
        encryptedScore: BigNumber;
        dataHash: string;
        validUntil: BigNumber;
        requestedBy: string;
      }
    >;

    setModelActive(
      _isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateModelParameters(
      _baseScore: PromiseOrValue<BigNumberish>,
      _riskMultiplier: PromiseOrValue<BigNumberish>,
      _creditLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BaseScoreUpdated(uint256)"(
      newBaseScore?: null
    ): BaseScoreUpdatedEventFilter;
    BaseScoreUpdated(newBaseScore?: null): BaseScoreUpdatedEventFilter;

    "ComputationCompleted(bytes32,address,uint256)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null,
      encryptedScore?: null
    ): ComputationCompletedEventFilter;
    ComputationCompleted(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null,
      encryptedScore?: null
    ): ComputationCompletedEventFilter;

    "ComputationRequested(bytes32,address,address)"(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null,
      fintech?: PromiseOrValue<string> | null
    ): ComputationRequestedEventFilter;
    ComputationRequested(
      requestId?: PromiseOrValue<BytesLike> | null,
      userAddress?: PromiseOrValue<string> | null,
      fintech?: PromiseOrValue<string> | null
    ): ComputationRequestedEventFilter;

    "ModelParametersUpdated(uint256)"(
      timestamp?: null
    ): ModelParametersUpdatedEventFilter;
    ModelParametersUpdated(timestamp?: null): ModelParametersUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    baseCreditScore(overrides?: CallOverrides): Promise<BigNumber>;

    completedRequests(overrides?: CallOverrides): Promise<BigNumber>;

    executeComputation(
      _requestId: PromiseOrValue<BytesLike>,
      _encryptedUserData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fintechRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputationRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getEncryptedScore(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFintechRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModelParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRequestValid(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modelParams(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestComputation(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _dataHash: PromiseOrValue<BytesLike>,
      _validUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setModelActive(
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalRequests(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateModelParameters(
      _baseScore: PromiseOrValue<BigNumberish>,
      _riskMultiplier: PromiseOrValue<BigNumberish>,
      _creditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseCreditScore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completedRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeComputation(
      _requestId: PromiseOrValue<BytesLike>,
      _encryptedUserData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fintechRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputationRequest(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEncryptedScore(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFintechRequests(
      _fintechAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModelParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRequests(
      _userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRequestValid(
      _requestId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modelParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestComputation(
      _userAddress: PromiseOrValue<string>,
      _requestId: PromiseOrValue<BytesLike>,
      _dataHash: PromiseOrValue<BytesLike>,
      _validUntil: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setModelActive(
      _isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateModelParameters(
      _baseScore: PromiseOrValue<BigNumberish>,
      _riskMultiplier: PromiseOrValue<BigNumberish>,
      _creditLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRequests(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
